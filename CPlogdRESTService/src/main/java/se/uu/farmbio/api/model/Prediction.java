/*
 * Conformal Prediction Log D
 * This is a Conformal Prediction Service for predicting Log D values for compounds. The  underlying model has been trained and evaluated on ChEMBL 23 data. Modeling is done using CPSign, product of GenettaSoft AB.
 *
 * OpenAPI spec version: 0.0.1
 * Contact: info@genettasoft.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package se.uu.farmbio.api.model;

import java.util.Objects;

import org.json.simple.JSONObject;

import com.fasterxml.jackson.annotation.JsonProperty;

import io.swagger.v3.oas.annotations.media.Schema;
import se.uu.farmbio.api.predict.Utils;

/**
 * Prediction result
 */
public class Prediction   {
	
	@JsonProperty("smiles")
	@Schema(description="Compound structure notated using SMILES notation", required=true, example="c1ccccc1")
	private final String smiles;

	@JsonProperty("lower")
	@Schema(description= "The lower range of the prediction value", required=true, example="1.755")
	private final Double lower;

	@JsonProperty("upper")
	@Schema(description= "The upper range of the prediction value", required=true, example="2.571")
	private final Double upper;

	@JsonProperty("predictionMidpoint")
	@Schema(
			description = "The predicted midpoint value, note that this is the  prediction given by the underlying SVM-models and there is NO confidence assigned to this point value!", 
			required=true, example="2.163")
	private final Double predictionMidpoint;

	@JsonProperty("confidence")
	@Schema(description = "The confidence of the prediction", required=true, example="0.8")
	private final Double confidence;

	public Prediction(String smiles, double lower, double upper, double mp, double confidence) {
		this.smiles = smiles;
		this.lower = lower;
		this.upper = upper;
		this.predictionMidpoint = mp;
		this.confidence = confidence;
	}

	@Override
	public boolean equals(java.lang.Object o) {
		if (this == o) {
			return true;
		}
		if (o == null || getClass() != o.getClass()) {
			return false;
		}
		Prediction prediction = (Prediction) o;
		return Objects.equals(this.smiles, prediction.smiles) &&
				Objects.equals(this.lower, prediction.lower) &&
				Objects.equals(this.upper, prediction.upper) &&
				Objects.equals(this.predictionMidpoint, prediction.predictionMidpoint);
	}

	@Override
	public int hashCode() {
		return Objects.hash(smiles, lower, upper, predictionMidpoint);
	}


	@SuppressWarnings("unchecked")
	@Override
	public String toString() {
		JSONObject resp = new JSONObject();
		resp.put("smiles", smiles);
		resp.put("lower", Utils.roundTo3digits(lower));
		resp.put("upper", Utils.roundTo3digits(upper));
		resp.put("predictionMidpoint", Utils.roundTo3digits(predictionMidpoint));
		resp.put("confidence", confidence);
		return resp.toJSONString();
	}

}

